// Used when creating a position that reuses
// an existing waypoint from the sender.
message WaypointStoreExtendMessage {
  required uint32 counter = 1;
  // valueIndex is the current last + 1.
}

// Used when creating a position that uses
// a new waypoint.
message WaypointStoreWaypointMessage {
  // Omitted if it's the same as the position's senderID.
  optional string parentWaypointSenderID = 1;
  // Sign gives side (R child = +1); actual counter is
  // as given if positive, ~ (bitwise NOT) if negative.
  required sint32 parentWaypointCounterAndSide = 2;
  required uint32 parentValueIndex = 3;
}

message WaypointStoreCreateMessage {
  oneof type {
    WaypointStoreExtendMessage extend = 1;
    WaypointStoreWaypointMessage waypoint = 2;
  }
  // The number of positions created, with sequential
  // valueIndex's.
  optional uint32 count = 3 [default=1];
  // Optional info field.
  optional bytes info = 4;
}

message WaypointStoreSave {
  // Excludes root ("").
  repeated string replicaIDs = 1;
  // replicaCounts[i] is number of waypoints with sender replicaIDs[i].
  repeated uint32 replicaCounts = 2 [packed=true];
  // In order by sender, then by counter, excluding the root.
  // Number is 1 + (index in this list), or 0 for the root.
  repeated uint32 parentWaypoints = 3 [packed=true];
  // Same order as parentWaypoints.
  // Sign gives side (R child = +1); actual valueIndex is
  // as given if positive, ~ (bitwise NOT) if negative.
  repeated sint32 parentValueIndexAndSides = 4 [packed=true];
  // Starts with root, then same order as parentWaypoints.
  repeated uint32 valueCounts = 5 [packed=true];
}
