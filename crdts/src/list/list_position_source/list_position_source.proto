message ListPositionSourceMetadataMessage {
  // Omitted if it's the same as the position's sender.
  optional string parentWaypointSender = 1;
  // Sign gives side (R child = +1); actual counter is
  // as given if positive, ~ (bitwise NOT) if negative.
  required sint64 parentWaypointCounterAndSide = 2;
  required uint32 parentValueIndex = 3;
}

message ListPositionSourceSave {
  required string oldReplicaID = 1;
  required uint32 oldNextCounter = 2;
  // Excludes root ("").
  repeated string replicaIDs = 3;
  // replicaCounts[i] is number of waypoints with sender replicaIDs[i].
  repeated uint32 replicaCounts = 4 [packed=true];
  // In order by sender, then by counter, excluding the root.
  // Number is 1 + (index in this list), or 0 for the root.
  repeated uint32 parentWaypoints = 5 [packed=true];
  // Same order as parentWaypoints.
  repeated uint32 parentValueIndices = 6 [packed=true];
  // Starts with root, then same order as parentWaypoints.
  repeated uint64 totalPresentValuess = 7 [packed=true];
  // All children, for waypoints in order [root, then same as parentWaypoints],
  // and in order within each waypoint. Children represented as:
  // absolute value, for numbers; waypoint id like in parentWaypoints
  // but without the +1 (since root is impossible), for waypoints.
  repeated uint32 children = 8 [packed=true];
  // For each child, gives type (0 = positive number, 1 = negative number,
  // 2 = waypoint) plus 4 if the child ends the current waypoint.
  // OPT: pack bits? (3 bits per child). Low priority (already quite compact).
  // Or, could use children sign bit to help out, so we only need 2 bits each.
  repeated uint32 childTypes = 9 [packed=true];
}
