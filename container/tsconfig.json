{
  "compilerOptions": {
    /* Use . as rootDir so build contains a nested src folder.
     * This keeps things consistent across different projects,
     * some of which have a "generated" folder (thus causing
     * Typescript to set rootDir = . by default) while
     * others don't.
     */
    "rootDir": ".",
    "outDir": "build/esm",
    "target": "es2019",
    "module": "es2015",
    /* Needed with module: es2015 or else stuff breaks. */
    "moduleResolution": "node",
    /* Enable strict type checking. */
    "strict": true,
    /* The workspace structure causes tsc to check all
     * projects in node_modules during compilation, including
     * one tfjs dependency (webgl pinned version) that has
     * a bug.  So while we are using workspaces, we need
     * to skipLibChecks.
     */
    "skipLibCheck": true,
    /* Enable interop with dependencies using different module systems. */
    "esModuleInterop": true,
    /* Emit .d.ts files. */
    "declaration": true,
    /* Emit sourcemap files. */
    "sourceMap": true,
    /* Use tslib to reduce generated js file sizes. */
    "importHelpers": true
  },
  /* Here we deliberately include "generated" (CommonJS version) instead of
   * "generated_esm", even though this config is for the ESM build.
   * That avoids a bug where TypeScript tries to process
   * generated_esm/proto_compiled.js, sees some JSDoc type annotations
   * that it doesn't like, and complains, even though
   * there are perfectly fine type annotations in
   * generated_esm/proto_compiled.d.ts (or at least, there
   * would be, if we didn't skip generating them during
   * build:protobuf). Instead, both the CommonJS and ESM builds
   * use generated/proto_compiled.d.ts, and build:ts manually copies
   * generated_esm/proto_compiled.js over to build/esm/generated/proto_compiled.js.
   *
   * Note that because of this choice, tsconfig.commonjs.json
   * doesn't need to override "include" to change "generated_esm"
   * to "generated".
   */
  "include": ["src", "generated"]
}
