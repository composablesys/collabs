// First attempt at the interface between the runtime
// (causal broadcast network, etc.) and the Crdts.

import { Crdt } from "../crdts";

/**
 * Interface describing the causal timestamps that
 * get passed to Crdts when they receive a message
 * (e.g., a vector clock).
 */
export interface CausalTimestamp {
    /**
     * @return the message sender's replica id.
     */
    getSender(): string;
    /**
     * @return whether the message was generated by the local
     *  replica.  Equivalent to getSender() ==
     *  CrdtRuntime.getReplicaId().
     */
    isLocal(): boolean;
    /**
     * @return the counter for messages sent by this message's
     * sender.  It must be the same as
     * this.asVectorClock().get(this.getSender()).
     */
    getSenderCounter(): number;
    /**
     * @return this timestamp in the form of a vector clock,
     * i.e., as a map from replica ids to the number of their
     * most recent <= message.
     */
    asVectorClock(): Map<string, number>;
    // TODO: ?
}

// export interface CrdtMessageListener {
//     // Callback used by CrdtRuntime.
//     /**
//      * Callback used by CrdtRuntime.
//      * @targetPath: the target Crdt's id followed by
//      * the ids of its ancestors in ascending order,
//      * excluding the current Crdt.
//      * @param timestamp The timestamp of the received message
//      * @param message   The received message
//      */
//     receive(targetPath: string[], timestamp: CausalTimestamp,
//             message: Uint8Array): void;
// }

/**
 * Interface describing the runtime environment, which
 * handles networking, causal broadcast, etc. for the
 * Crdts.
 */
export interface CrdtRuntime {
    /**
     * Used by a Crdt to send a message to its other replicas.
     * @param message The message to send
     * @param crdtId  The sending Crdt's id, used to make
     * sure message only goes to other replicas of this Crdt
     * @param causalConsistencyGroup The causal
     * consistency group to use for this message.  Messages
     * sent in the same causal consistency group should use
     * a common source of timestamps, so that they are
     * all causally ordered with respect to each other, even
     * if they come from different Crdts.
     */
    send(senderFullId: string[], message: Uint8Array): void;
    /**
     * Registers the given Crdt to receive messages
     * from other replicas intended for the
     * given crdtId.  Such messages should be delivered
     * to crdt.receive.
     * TODO: for now, only use this for top-level crdts.
     * In the future, allow shortcutting.
     * @param crdt The Crdt.
     * @param crdtId The Crdt's id.
     */
    register(crdt: Crdt, id: string): void;
    /**
     * @return This replica's id, used by some Crdts internally
     * (e.g., to generate unique identifiers of the form
     * (replica id, counter)).
     */
    getReplicaId(): string;
}
